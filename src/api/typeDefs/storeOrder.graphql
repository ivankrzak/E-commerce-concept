enum StoreOrderStatus {
  NEW
  IN_PROGRESS
  IN_TRANSIT
  COMPLETED
  FAILED
}

enum PaymentStatus {
  SUCCESSFUL
  AWAITING
  FAILED
}

type StoreOrderItems {
  id: Int!
  name: String!
  quantity: Int!
  price: Int!
  storeOrderId: Int
  productVariantId: Int
  storeOrder: StoreOrder
  productVariant: ProductVariant
}

type StoreOrder {
  id: Int!
  totalAmount: Int!
  shippingTrackingNumber: Int
  notes: String
  status: StoreOrderStatus!
  paymentStatus: PaymentStatus!
  # TODO make required later
  userId: String
  paymentMethodId: Int!
  shippingMethodId: Int!
  createdAt: Date!
  updatedAt: Date!
  user: User
  paymentMethod: PaymentMethod!
  shippingMethod: ShippingMethod!
  storeOrderItems: [StoreOrderItems!]!
}

input OrderItemInput {
  productVariantId: Int!
  quantity: Int!
}

input CreateOrderInput {
  userId: String
  paymentMethodId: Int!
  shippingMethodId: Int!
  orderedItems: [OrderItemInput!]!
  notes: String
}

input ChangeOrderStatusInput {
  orderIds: [Int!]!
  status: StoreOrderStatus!
}

type Query {
  orders: [StoreOrder!]!
  orderById(id: Int!): StoreOrder!
}

type Mutation {
  createOrder(input: CreateOrderInput!): StoreOrder!
  changeOrderStatus(input: ChangeOrderStatusInput!): Boolean!
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  // This is for planet scale setup
  referentialIntegrity = "prisma"
}

enum ProductStatus {
  PRE_ORDER
  ACTIVE
  SALE
  DISABLED
}

enum UserRole {
  ADMIN
  CUSTOMER
}

enum ShopOrderStatus {
  NEW
  IN_PROGRESS
  IN_TRANSIT
  COMPLETED
  FAILED
}

enum PaymentStatus {
  SUCCESSFUL
  AWAITING
  FAILED
}

enum AddressType {
  BILLING
  SHIPPING
}

model Address {
  id          Int         @id @default(autoincrement())
  type        AddressType @default(BILLING)
  street      String
  houseNumber String?
  city        String
  postCode    String
  formatted   String
  country     String
  placeId     String
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PaymentMethod {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(250)
  isActive   Boolean      @default(true)
  StoreOrder StoreOrder[]
}

model ShippingMethod {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(250)
  price      Int
  isActive   Boolean      @default(true)
  StoreOrder StoreOrder[]
}

model StoreOrder {
  id                     Int             @id @default(autoincrement())
  totalAmount            Int
  shippingTrackingNumber Int?
  notes                  String?
  status                 ShopOrderStatus @default(NEW)
  paymentStatus          PaymentStatus   @default(AWAITING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId           String?
  paymentMethodId  Int
  shippingMethodId Int
  user             User?            @relation(fields: [userId], references: [id])
  paymentMethod    PaymentMethod    @relation(fields: [paymentMethodId], references: [id])
  shippingMethod   ShippingMethod   @relation(fields: [shippingMethodId], references: [id])
  storeOrderItems  StoreOrderItem[]
}

model StoreOrderItem {
  id       Int    @id @default(autoincrement())
  name     String
  quantity Int
  price    Int

  storeOrderId     Int
  productVariantId Int
  storeOrder       StoreOrder     @relation(fields: [storeOrderId], references: [id])
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
}

model Product {
  id                      Int              @id @default(autoincrement())
  slug                    String           @unique
  name                    String           @unique
  shortDescription        String?          @db.VarChar(50)
  description             String?          @db.LongText
  categoryId              Int?
  titleImageUrl           String?
  isActive                Boolean          @default(true)
  allowOutOfStockPurchase Boolean          @default(false)
  isDigital               Boolean          @default(false)
  syncVariantPrices       Boolean          @default(true)
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  category                Category?        @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  variants                ProductVariant[]
}

model Category {
  id               Int        @id @default(autoincrement())
  name             String     @unique @db.VarChar(25)
  parentCategoryId Int?
  parentCategory   Category?  @relation("Categories", fields: [parentCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subCategories    Category[] @relation("Categories")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  products         Product[]
}

model ProductVariant {
  id             Int              @id @default(autoincrement())
  productId      Int
  sku            Int?
  quantity       Int              @default(0)
  variantImage   String?
  status         ProductStatus    @default(ACTIVE)
  colorId        Int?
  sizeId         Int?
  price          Int
  salePrice      Int?
  isOnSale       Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  color          ProductColor?    @relation(fields: [colorId], references: [id])
  size           ProductSize?     @relation(fields: [sizeId], references: [id])
  product        Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  StoreOrderItem StoreOrderItem[]
}

model ProductColor {
  id              Int              @id @default(autoincrement())
  name            String           @unique @db.VarChar(25)
  hexValue        String           @unique @db.VarChar(10)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  productVariants ProductVariant[]
}

model ProductSize {
  id              Int              @id @default(autoincrement())
  value           String           @unique @db.VarChar(10)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  productVariants ProductVariant[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  password      String?
  emailVerified DateTime?
  role          UserRole?    @default(CUSTOMER)
  image         String?
  accounts      Account[]
  sessions      Session[]
  StoreOrder    StoreOrder[]
  Address       Address[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
